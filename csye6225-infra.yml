AWSTemplateFormatVersion: "2010-09-09"
Description: Cloud Formation Template
Parameters:
  VpcParamCidrBlock:
    Description: "CIDR block for VPC, Enter IP address range for VPC."
    Type: String
    Default: "10.0.0.0/16"
  Subnet1ParamCidr:
    Description: "Enter the IP address range for the mySubnet1 in AZ 1"
    Type: String
    Default: 10.0.0.10/24
  Subnet2ParamCidr:
    Description: "Enter the IP address range for the mySubnet2 in AZ 2"
    Type: String
    Default: 10.0.1.21/24
  Subnet3ParamCidr:
    Description: "Enter the IP address range for the mySubnet3 in AZ 3"
    Type: String
    Default: 10.0.2.8/24
  SubnetPrivate1Cidr:
    Description: "Enter the IP address range for the private Subnet1 in AZ 1"
    Type: String
    Default: 10.0.4.1/24
  SubnetPrivate2Cidr:
    Description: "Enter the IP address range for the private Subnet2 in AZ 2"
    Type: String
    Default: 10.0.5.1/24
  SubnetPrivate3Cidr:
    Description: "Enter the IP address range for the private Subnet3 in AZ 3"
    Type: String
    Default: 10.0.6.1/24
  AMIID:
    Type: String
    Description: "Id of AMI"
    Default: ""
  KeyPairName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: aws-01-vaishali
    Description: "The name of an existing Amazon EC2 key pair in this region to use to SSH into the Amazon EC2 instances"
  S3BucketName:
    Type: String
    Description: The name for the S3 bucket - Randomly generated and Unique
    Default: "mys3bucketnew"
    AllowedPattern: "^[a-z0-9]{5,40}$"
    ConstraintDescription: 3-63 characters; must contain only lowercase letters or numbers
  DBName:
    Type: String
    Description: RDS Database name
    Default: csye6225
  MasterUsername:
    Type: String
    Description: RDS database master user name
    Default: csye6225
  MasterUserPassword:
    Type: String
    Description: RDS database master user password
    Default: Mysqlvjneu786
  DBInstanceClass:
    Type: String
    Description: RDS database instance class
    Default: db.t3.micro
  DBInstanceIdentifier:
    Default: csye6225
    Description: My database instance
    Type: String
  HostedZoneName:
    Default: dev.vjeenwalcloudnet.me.
    Description: The route53 HostedZoneName.
    Type: String
  Subdomain:
    Default: ""
    Description: The subdomain of the DNS entry.
    Type: String
Resources:
  # Create a VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcParamCidrBlock
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: "default"
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  # Create Public Subnets
  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [0, !GetAZs ""] # AZ 1
      CidrBlock: !Ref Subnet1ParamCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [1, !GetAZs ""] # AZ 2
      CidrBlock: !Ref Subnet2ParamCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [2, !GetAZs ""] # AZ 3
      CidrBlock: !Ref Subnet3ParamCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  # Create Private Subnet
  myPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [0, !GetAZs ""] # AZ 1
      CidrBlock: !Ref SubnetPrivate1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  myPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [1, !GetAZs ""] # AZ 2
      CidrBlock: !Ref SubnetPrivate2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  myPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [2, !GetAZs ""] # AZ 3
      CidrBlock: !Ref SubnetPrivate3Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  # Create a InternetGateway
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  # Attaching VPC to Internet Gateway
  myVPCIGAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref myVPC
  # Create a Public Route Table
  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  # Associate Route Table with subnets
  myRouteTableSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      SubnetId: !Ref mySubnet1
  myRouteTableSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      SubnetId: !Ref mySubnet2
  myRouteTableSubnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      SubnetId: !Ref mySubnet3
  # Create a public route in the public route table with destination cidr and Internet Gateway
  myPublicRoute:
    DependsOn: myVPCIGAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
  # Specify an Elastic IP (EIP) address for a NAT Gateway in AZ 1, Create a NAT Gateway in the public subnet for AZ 1,
  # Create a private route table for AZ 1 and Associate the private route table with the Nat Gateway in AZ 1 and
  # Associate the private route table with the private subnet in AZ 1
  myNatGateway1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  myNatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt myNatGateway1EIP.AllocationId
      SubnetId: !Ref mySubnet1
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  myPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  myNATGatewayRoute1:
    Type: AWS::EC2::Route
    DependsOn: myVPCIGAttachment
    Properties:
      RouteTableId: !Ref myPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref myNatGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable1
      SubnetId: !Ref myPrivateSubnet1
  # Specify an Elastic IP (EIP) address for a NAT Gateway in AZ 2, Create a NAT Gateway in the public subnet for AZ 2,
  # Create a private route table for AZ 2 and Associate the private route table with the Nat Gateway in AZ 2 and
  # Associate the private route table with the private subnet in AZ 2
  myNatGateway2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  myNatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt myNatGateway2EIP.AllocationId
      SubnetId: !Ref mySubnet2
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  myPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  myNATGatewayRoute2:
    Type: AWS::EC2::Route
    DependsOn: myVPCIGAttachment
    Properties:
      RouteTableId: !Ref myPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref myNatGateway2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable2
      SubnetId: !Ref myPrivateSubnet2
  # Specify an Elastic IP (EIP) address for a NAT Gateway in AZ 3, Create a NAT Gateway in the public subnet for AZ 3,
  # Create a private route table for AZ 3 and Associate the private route table with the Nat Gateway in AZ 3 and
  # Associate the private route table with the private subnet in AZ 3
  myNatGateway3EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  myNatGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt myNatGateway3EIP.AllocationId
      SubnetId: !Ref mySubnet3
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  myPrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  myNATGatewayRoute3:
    Type: AWS::EC2::Route
    DependsOn: myVPCIGAttachment
    Properties:
      RouteTableId: !Ref myPrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref myNatGateway3
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable3
      SubnetId: !Ref myPrivateSubnet3
  # Create Security Group for application
  myWebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "application"
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref myLBSecurityGroup
  #Create RDS instance
  myRDSBBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - myDBSecurityGroup
      - myDBSubnetGroup
      - myRDSParameterGroup
      - myRDSInstanceKmsKey
    Properties:
      DBParameterGroupName: !Ref myRDSParameterGroup
      VPCSecurityGroups:
        - !Ref myDBSecurityGroup
      AllocatedStorage: "5"
      DBInstanceClass: !Ref DBInstanceClass
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      Engine: MySQL
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      DBName: !Ref DBName
      PubliclyAccessible: No
      MultiAZ: No
      DBSubnetGroupName: !Ref myDBSubnetGroup
      StorageEncrypted: true
      KmsKeyId: !Ref myRDSInstanceKmsKey
  #Create EC2 instance
  myEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - myRDSBBInstance
    Properties:
      ImageId: !Ref AMIID
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref myInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: "50"
            DeleteOnTermination: "true"
            Encrypted: "true"
      SecurityGroupIds:
        - !Ref myWebAppSecurityGroup
      SubnetId: !Ref mySubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo USERNAME=${MasterUsername} >> /home/ubuntu/app.env
          echo PASSWORD=${MasterUserPassword} >> /home/ubuntu/app.env
          echo S3BUCKETNAME=${S3BucketName}-${AWS::Region} >> /home/ubuntu/app.env
          echo HOSTNAME=${myRDSBBInstance.Endpoint.Address} >> /home/ubuntu/app.env
          echo REGION=${AWS::Region} >> /home/ubuntu/app.env
          echo "Start Systemd"
          sudo systemctl enable index.service
          sudo systemctl start index.service 
          sleep 20
          echo "Reload Demon"
          sudo systemctl daemon-reload  
          sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 3000
  # Create S3 Bucket
  MyS3Bucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref S3BucketName
          - !Ref "AWS::Region"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
  #Create RDS Parameter Group
  myRDSParameterGroup:
    Type: "AWS::RDS::DBParameterGroup"
    Properties:
      Description: Parameter group for the MYSQL RDS DB
      Family: mysql8.0
      Parameters:
        sql_mode: IGNORE_SPACE
        max_allowed_packet: 16777216
        innodb_buffer_pool_size: "{DBInstanceClassMemory*3/4}"
  #Create Subnet Group
  myDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: DB subnet group
      SubnetIds:
        - !Ref myPrivateSubnet1
        - !Ref myPrivateSubnet2
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  # Create Security group for database
  myDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "database"
      GroupDescription: "Allow mysql inbound traffic"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref myWebAppSecurityGroup
  # Create instance profile
  myInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref myEC2CSYE6225IAMRole
  # Create EC2 IAM Role
  myEC2CSYE6225IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-CSYE6225
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      Path: /
  # Create S3 Policy
  myWebAppS3Policy:
    Type: AWS::IAM::Policy
    DependsOn:
      - myEC2Instance
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:PutObjectAcl"
              - "s3:DeleteObject"
              - "s3:ListMultipartUploadParts"
              - "s3:AbortMultipartUpload"
            Resource:
              - !Sub arn:aws:s3:::${S3BucketName}-${AWS::Region}
              - !Sub arn:aws:s3:::${S3BucketName}-${AWS::Region}/*
      Roles:
        - !Ref myEC2CSYE6225IAMRole
  # Create cloud watch agent policy
  myCloudWatchAgentServerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudWatchAgentServerPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
              - "logs:PutLogEvents"
              - "logs:DescribeLogStreams"
              - "logs:DescribeLogGroups"
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
            Resource: "*"
      Roles:
        - Ref: myEC2CSYE6225IAMRole
  # Create DNS Record
  DnsRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Comment: Zone alias for load balancer.
      RecordSets:
        - Name: !Ref HostedZoneName
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt "myLoadBalancer.CanonicalHostedZoneID"
            DNSName: !GetAtt "myLoadBalancer.DNSName"
  # Create SNS Topic
  mySNSTopic:
    Type: AWS::SNS::Topic
    DependsOn: myLambdaFunction
    Properties:
      DisplayName: SNSTopicLambda
      TopicName: SNSTopicLambda
      Subscription:
        - Endpoint: !GetAtt myLambdaFunction.Arn
          Protocol: lambda
  mySNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:Publish
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - SNS:AddPermission
              - SNS:RemovePermission
              - SNS:DeleteTopic
              - SNS:Subscribe
              - SNS:ListSubscriptionsByTopic
              - SNS:Publish
              - SNS:Receive
            Resource:
              - !Ref mySNSTopic
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
      Topics:
        - !Ref mySNSTopic
  # Create Lambda Function, Role, Policy and Permissions
  LambdaInvokePermission:
    DependsOn: myLambdaFunction
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: mySNSTopic
      FunctionName: !Ref myLambdaFunction
  myLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      Path: /
  myLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: lambda-function-${AWS::Region}
      Description: LambdaFunctioni of nodejs16.x.
      PackageType: Zip
      Runtime: nodejs16.x
      Code:
        ZipFile: |
          const aws = require("aws-sdk");
          var dynamoDB = new aws.DynamoDB.DocumentClient({
          region: "us-east-1"
          });

          exports.handler = async function (event, context) {
          let SnsMessage = event.Records[0].Sns.Message;
          let jsonParse = JSON.parse(SnsMessage);
          let email = jsonParse.username;

          let token = jsonParse.token;
          let currentTime = new Date().getTime();
          let validTime = 5 * 60 * 1000;
          let timeToLive = currentTime + validTime;

          var table = {
               TableName : "dynamodbTable",
               Item:{
                    "Email" : email,
                    "Token" : token,
                    "TimeToLive" : timeToLive
                    }
            }

          dynamoDB.put(table, function(err, data) {
               if (err) {
                     console.log(err, err.stack);
                }
               else {
                     console.log(data);
                }
          });

          const body = `<!DOCTYPE html>
          <html>
          <head>
          </head>
          <body>
          <p>Hi, ${email}</p>
          <p>Email verification Link</br>
          <b>You registered an account, before being able to use your account you need to verify that this is your email address by clicking below link</p>
          <p><a>http://prod.vjeenwalcloudnet.me/v1/verifyUserEmail?email=${email}&token=${token}</a></p>
          </body></html>
          </body>
          </html>`;

          const ses = new aws.SES();
          const params = {
                   Destination: {
                      ToAddresses: [email],
                  },
                      Message: {
                      Body: {
                      Html: { Data: body },
                  },
                      Subject: {
                      Data: "Email",
                  },
           },
           Source: "contact@prod.vjeenwalcloudnet.me",
           };

           try {
                await ses.sendEmail(params).promise();
                return {
                        statusCode: 200,
                        body: "Email sent!",
                      };
                } catch (e) {
                         console.error(e);
                return {
                         statusCode: 400,
                         body: "Sending failed",
                };
                }
              };
      Handler: index.handler
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt myLambdaRole.Arn
      Environment:
        Variables:
          ENV:
            Fn::Sub: ${AWS::Region}
  # Create Dynamodb Table
  DynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "Email"
          AttributeType: "S"
        - AttributeName: "Token"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Email"
          KeyType: "HASH"
        - AttributeName: "Token"
          KeyType: "RANGE"
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: dynamodbTable
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: true
      Tags:
        - Key: AWSCloudFormation
          Value: !Ref AWS::StackName
  # Create Load balancer security group
  myLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "load balancer security group"
      GroupName: "load balancer"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  myLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-launch-template"
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 20
              VolumeType: "gp3"
              DeleteOnTermination: true
              Encrypted: true
              # KmsKeyId: !Ref myEBSVolumeKmsKey
        ImageId: !Ref AMIID
        InstanceType: t2.micro
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
              - myInstanceProfile
              - Arn
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref myWebAppSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo USERNAME=${MasterUsername} >> /home/ubuntu/app.env
            echo PASSWORD=${MasterUserPassword} >> /home/ubuntu/app.env
            echo S3BUCKETNAME=${S3BucketName}-${AWS::Region} >> /home/ubuntu/app.env
            echo HOSTNAME=${myRDSBBInstance.Endpoint.Address} >> /home/ubuntu/app.env
            echo REGION=${AWS::Region} >> /home/ubuntu/app.env
            echo "Start Systemd"
            sudo systemctl enable index.service
            sudo systemctl start index.service 
            sleep 20
            echo "Reload Demon"
            sudo systemctl daemon-reload  
            sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 3000
  myAutoScalingGroupWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: "60"
      DesiredCapacity: "1"
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      MaxSize: "3"
      MinSize: "1"
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref myLBTargetGroup
      VPCZoneIdentifier:
        - !Ref mySubnet1
        - !Ref mySubnet2
        - !Ref mySubnet3
  myScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref myAutoScalingGroupWebApp
      Cooldown: 60
      ScalingAdjustment: 1
  myCPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: "1"
      Statistic: Average
      Threshold: "5"
      AlarmDescription: Scale-up if CPU > 5%
      Period: "300"
      AlarmActions:
        - !Ref myScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref myAutoScalingGroupWebApp
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  myScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref myAutoScalingGroupWebApp
      Cooldown: 60
      ScalingAdjustment: -1
  myCPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: "1"
      Statistic: Average
      Threshold: "3"
      AlarmDescription: Scale-down if CPU < 3%
      Period: "300"
      AlarmActions:
        - !Ref myScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref myAutoScalingGroupWebApp
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  myLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref myLBSecurityGroup
      Subnets:
        - !Ref mySubnet1
        - !Ref mySubnet2
        - !Ref mySubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application
  myLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: "/"
      HealthCheckPort: "3000"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 3000
      Protocol: "HTTP"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "20"
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref myVPC
  myLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myLBTargetGroup
      LoadBalancerArn: !Ref myLoadBalancer
      Port: 443
      Protocol: HTTP
  # #Create KMS Key for EBS Volume
  # myEBSVolumeKmsKey:
  #   Type: AWS::KMS::Key
  #   Properties:
  #     Description: !Sub KMS Key for EBS
  #     KeyPolicy:
  #       Version: 2012-10-17
  #       Id: "kms-key-for-ebs"
  #       Statement:
  #         - Sid: "Allow IAM User permission for EBS"
  #           Effect: Allow
  #           Principal:
  #             AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
  #           Action:
  #             - "kms:*"
  #           Resource: "*"
  #         - Sid: "Add service role"
  #           Effect: Allow
  #           Principal:
  #             AWS: !Join
  #               - ""
  #               - - "arn:aws:iam::"
  #                 - !Ref "AWS::AccountId"
  #                 - ":role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
  #           Action:
  #             - "kms:*"
  #           Resource: "*"
  #           Condition:
  #             Bool:
  #               kms:GrantIsForAWSResource: true
  #Create KMS Key for RDS Instance
  myRDSInstanceKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub KMS Key for RDS
      KeyPolicy:
        Version: 2012-10-17
        Id: "kms-key-for-rds"
        Statement:
          - Sid: "Allow IAM User permission for RDS Instance"
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - "kms:*"
            Resource: "*"
          - Sid: "Add service role"
            Effect: Allow
            Principal:
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"
            Action:
              - "kms:*"
            Resource: "*"
